import random
import time, sys

def qsort(S, m):
    comparison_counter = 0
    access_counter = 0

    def compares():
        nonlocal comparison_counter
        comparison_counter += 1

    def access(a = 1):
        nonlocal access_counter
        access_counter += a

    def partition0(L, R):  #classical partition
        compares()
        if L >= R:
            return
        p = L
        q = p + 1
        compares()
        for r in range(q, R + 1):
            compares()
            access(8)
            if S[r] < S[p]:
                t = S[p]
                S[p] = S[r]
                S[r] = S[q]
                S[q] = t
                p += 1
                q += 1
            compares()
        #print(S, "Pivot:", S[p], "@ index:", p)
        # partion the left side
        partition0(L, p - 1)
        # partion the right side
        partition0(p + 1, R)

    def partition1(
            L, R
    ):  #similar to partition0 but slightly optimized in speed, not in comparisons
        compares()
        if L >= R:
            return
        p = L
        q = p + 1
        access()
        piv = S[p]  #
        compares()
        for r in range(q, R + 1):
            compares()
            access(5)
            if S[r] < piv:  #S[p]:
                t = S[r]
                S[r] = S[q]
                S[q] = t
                q += 1
            compares()
        #t = S[p]
        access(3)
        S[p] = S[q - 1]
        S[q - 1] = piv  #t
        p = q - 1
        # partion the left side
        partition1(L, p - 1)
        # partion the right side
        partition1(p + 1, R)

    def partition2(L,
                   R):  #pivot is at center and lp & rp moves toward the center
        compares()
        if L >= R:
            return
        pp = (R + L) // 2
        access()
        P = S[pp]
        lp = L
        rp = R
        compares()
        while rp != lp:
            compares()
            access()
            while (S[lp] <= P):  # and (q < p):
                compares()
                if lp == pp:
                    break
                lp += 1
                # print("lp = {}    rp = {}    pp = {}".format(lp, rp, pp))
                compares()
                access()
                
            compares()
            access()
            while (S[rp] >= P):  # and (r > p):
                compares()
                if rp == pp:
                    break
                rp -= 1
                # print("lp = {}    rp = {}    pp = {}".format(lp, rp, pp))
                compares()
                access()

            access(4)
            t = S[lp]
            S[lp] = S[rp]
            S[rp] = t

            compares()
            if lp == pp:
                pp = rp
            elif rp == pp:
                pp = lp

            #print("lp = {}    rp = {}    pp = {}".format(lp, rp, pp))
            compares()
        #print(S)
        # partion the left side
        partition2(L, pp - 1)
        # partion the right side
        partition2(pp + 1, R)
        
    if m == 0:
        partition0(0, len(S) - 1)
    elif m == 1:
        partition1(0, len(S) - 1)
    elif m == 2:
        partition2(0, len(S) - 1)
    #print(S)
    return comparison_counter, access_counter


def main():
    """L0 = [271, 69, 407, 154, 677, 894, 317, 205, 678, 264, 89, 883, 212, 66, 606, 623, 918, 784, 228, 133, 896, 541, 67, 296, 999, 298, 588, 835, 265, 849, 831, 766, 943, 315, 599, 797, 592, 259, 591,
	590, 463, 583, 935, 776, 810, 698, 904, 428, 626, 859, 488, 561, 625, 948, 312, 28, 243, 533, 517, 138, 335, 502, 368, 429, 201, 357, 117, 577, 529, 687, 43, 234, 750, 739, 497, 602, 372, 396, 767,
	403, 888, 535, 464, 238, 804, 175, 893, 107, 580, 989, 586, 381, 397, 353, 763, 826, 710, 173, 491, 931, 299, 242, 827, 289, 727, 240, 564, 531, 101, 912, 576, 34, 272, 292, 837, 440, 195, 378, 879,
	97, 786, 367, 438, 545, 327, 300, 53, 855, 618, 41, 224, 563, 906, 346, 291, 459, 780, 665, 247, 950, 158, 393, 814, 503, 153, 570, 471, 184, 560, 638, 92, 986, 65, 956, 910, 791, 719, 911, 507,
	325, 728, 344, 95, 816, 957, 244, 973, 58, 686, 316, 548, 690, 976, 662, 176, 593, 874, 8, 771, 415, 891, 967, 219, 936, 467, 329, 56, 558, 996, 506, 281, 775, 493, 434, 85, 743, 994, 473, 808,
	518, 709, 370, 673, 685, 280, 796, 675, 663, 717, 11, 644, 615, 758, 96, 652, 25, 113, 803, 87, 872, 388, 211, 210, 868, 283, 30, 655, 616, 820, 257, 930, 848, 789, 811, 877, 188, 121, 474, 821,
	705, 549, 762, 220, 573, 983, 301, 610, 6, 937, 732, 256, 574, 24, 75, 333, 76, 765, 947, 990, 375, 721, 226, 392, 834, 694, 365, 410, 707, 536, 303, 0, 345, 769, 958, 432, 423, 10, 815, 645,
	530, 519, 611, 341, 99, 661, 267, 456, 964, 681, 338, 851, 406, 984, 476, 379, 294, 759, 269, 725, 596, 285, 332, 785, 627, 155, 962, 124, 126, 425, 342, 878, 860, 528, 832, 330, 135, 324, 799,
	132, 20, 141, 278, 426, 587, 207, 142, 857, 538, 562, 466, 295, 913, 413, 398, 9, 189, 747, 682, 82, 650, 882, 579, 751, 916, 400, 275, 490, 927, 955, 208, 779, 819, 806, 149, 605, 659, 420,
	468, 356, 697, 484, 674, 649, 2, 223, 575, 897, 33, 736, 772, 287, 774, 987, 929, 448, 521, 680, 729, 601, 119, 941, 435, 745, 778, 470, 71, 559, 391, 241, 511, 537, 954, 416, 959, 700, 395,
	209, 818, 442, 1, 922, 203, 185, 781, 276, 187, 960, 982, 632, 382, 715, 600, 305, 621, 992, 192, 385, 54, 919, 735, 925, 421, 828, 108, 105, 394, 880, 887, 443, 889, 901, 387, 749, 672, 522,
	446, 862, 371, 177, 823, 246, 70, 527, 699, 647, 951, 26, 419, 93, 642, 458, 61, 29, 64, 552, 565, 359, 920, 277, 162, 451, 206, 380, 200, 718, 841, 236, 884, 45, 439, 251, 143, 842, 130, 979,
	98, 740, 792, 431, 202, 482, 917, 970, 839, 171, 496, 928, 170, 32, 457, 953, 980, 402, 363, 159, 966, 140, 38, 51, 334, 472, 525, 331, 782, 844, 653, 273, 753, 412, 261, 55, 118, 556, 639, 703,
	809, 713, 364, 634, 946, 194, 847, 160, 744, 822, 399, 568, 746, 486, 858, 968, 3, 865, 850, 252, 846, 636, 940, 520, 181, 489, 975, 597, 127, 516, 389, 620, 609, 691, 136, 795, 401, 39, 74,
	716, 641, 598, 254, 807, 997, 217, 836, 907, 693, 498, 408, 501, 340, 903, 978, 924, 584, 227, 178, 360, 343, 939, 995, 714, 78, 111, 253, 422, 993, 805, 144, 164, 182, 437, 318, 817, 233, 557,
	268, 477, 116, 14, 62, 869, 481, 313, 885, 712, 198, 454, 692, 944, 914, 262, 825, 908, 508, 358, 998, 49, 409, 843, 546, 483, 886, 103, 656, 405, 853, 856, 161, 417, 569, 13, 726, 258, 213,
	708, 622, 551, 104, 787, 337, 895, 824, 90, 711, 310, 926, 100, 347, 255, 404, 945, 902, 572, 643, 628, 646, 977, 578, 991, 50, 923, 863, 669, 720, 441, 696, 660, 666, 900, 19, 757, 214, 571,
	702, 701, 351, 411, 157, 485, 764, 932, 447, 475, 965, 756, 526, 985, 123, 867, 323, 450, 309, 668, 279, 152, 875, 122, 248, 942, 169, 864, 433, 730, 582, 35, 671, 845, 166, 840, 63, 899, 94,
	386, 790, 263, 314, 873, 225, 319, 499, 614, 156, 971, 288, 361, 383, 838, 308, 934, 167, 22, 165, 222, 604, 679, 890, 199, 543, 657, 44, 31, 302, 915, 608, 876, 761, 688, 145, 495, 635, 630,
	232, 270, 307, 47, 110, 168, 215, 362, 134, 40, 17, 180, 640, 444, 52, 129, 191, 670, 905, 81, 322, 480, 4, 427, 42, 260, 504, 631, 963, 16, 612, 617, 478, 567, 742, 146, 106, 800, 933, 783,
	755, 354, 921, 731, 293, 321, 73, 512, 376, 239, 581, 250, 84, 540, 15, 723, 706, 109, 139, 754, 455, 452, 683, 311, 532, 892, 741, 969, 72, 514, 306, 218, 752, 833, 494, 418, 112, 18, 27, 377,
	793, 37, 972, 505, 768, 290, 384, 748, 961, 48, 542, 881, 179, 369, 492, 510, 60, 854, 249, 348, 861, 352, 5, 949, 163, 91, 550, 297, 461, 115, 414, 722, 190, 36, 373, 829, 274, 871, 909, 658,
	355, 566, 898, 704, 734, 148, 798, 648, 374, 68, 216, 852, 245, 547, 186, 131, 664, 469, 866, 230, 607, 197, 120, 773, 974, 83, 534, 938, 7, 231, 585, 102, 449, 453, 77, 813, 137, 651, 629, 603,
	479, 801, 266, 80, 487, 794, 237, 555, 689, 513, 515, 733, 589, 88, 738, 204, 676, 339, 59, 462, 229, 724, 613, 320, 128, 637, 667, 196, 500, 424, 445, 328, 788, 349, 770, 509, 150, 183, 125, 595,
	46, 79, 633, 57, 436, 235, 802, 147, 284, 282, 151, 870, 21, 430, 23, 304, 193, 981, 12, 86, 544, 624, 221, 174, 336, 366, 952, 988, 326, 684, 460, 553, 524, 594, 114, 465, 390, 830, 812, 619,
	760, 737, 554, 777, 654, 695, 523, 539, 172, 286, 350]"""

    L0 = list(range(1000)) #500000 max
    random.shuffle(L0)
    
    
    sys.setrecursionlimit(1000)
    types = ("Normal unsorted list sorting...", "Already sorted list sorting...", "Descending-sorted list sorting...")
    starmethod = 2
    print("*** Sorting a list of {} elements ***".format(len(L0)))
    for method in range(starmethod,3,1):#3
        L1 = L0[:]  
        L2 = L1[:]
        L2.sort()
        L3 = L2[:]
        L3.reverse()

        temp = L2[500]
        L2[500] = L2[0]
        L2[0] = temp        

        temp = L3[500]
        L3[500] = L3[0]
        L3[0] = temp
        
        LISTS = (L1, L2, L3)
        print("Method:", method)
        
        for listtype in range(0,3,1):#3
            ti = time.process_time()
            c = qsort(LISTS[listtype], method)
            tf = time.process_time()
            t = (tf - ti) * 1000
            print("\t\t", types[listtype])
            print("\t\t{} comparisons, {} accesses, {} miliseconds".format(c[0], c[1], t))


        # print(L3)
""" there are 4 implementation types of partition:
-the first that I implemented
-the one that swap the pivot just in the end
-the one that move the pointers towards the center (I'm here trying to implement iter)
-the hungarian one.
"""


if __name__ == "__main__":

    main()
